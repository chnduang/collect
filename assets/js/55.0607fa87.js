(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{347:function(t,e,a){"use strict";a.r(e);var _=a(4),v=Object(_.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"一份值得收藏的-git-异常处理清单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一份值得收藏的-git-异常处理清单"}},[t._v("#")]),t._v(" 一份值得收藏的 Git 异常处理清单")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://www.zoo.team/article/git-exception",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zoo.team/article/git-exception"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("Git 作为一种分布式版本控制系统已经成为现在开发的宠儿，不仅应用在前端、后端、客户端等开发场景中，也成为各行业互联网企业分工协作的必备技能之一。")]),t._v(" "),e("p",[t._v("大家在使用过程中总会碰到这样那样的问题，本文主要针对以下经常发生的几种异常情况提供一些解决方案：")]),t._v(" "),e("ol",[e("li",[t._v("本地工作区文件恢复")]),t._v(" "),e("li",[t._v("远程分支删除后，删除本地分支与其关联")]),t._v(" "),e("li",[t._v("修改提交时的备注内容")]),t._v(" "),e("li",[t._v("修改分支名，实现无缝衔接")]),t._v(" "),e("li",[t._v("撤回提交")]),t._v(" "),e("li",[t._v("撤销本地分支合并")]),t._v(" "),e("li",[t._v("恢复误删的本地分支")]),t._v(" "),e("li",[t._v("不确定哪个分支有自己提交的 commit")])]),t._v(" "),e("h2",{attrs:{id:"一-本地工作区文件恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-本地工作区文件恢复"}},[t._v("#")]),t._v(" （一）本地工作区文件恢复")]),t._v(" "),e("p",[t._v("大家都知道，一个文件夹中的文件如果被删掉了，那只有在垃圾箱里面找了。如果垃圾箱里面的也被删掉了，以笔者的常识在不借助工具的情况下怕是就找不到了，emmmm。。。")]),t._v(" "),e("p",[t._v("不过，关联了 Git 的文件和文件夹就不一样了，有了本地仓库和远程仓库的双重保护，找到一个被删除的文件也不过就分分钟，一个命令行的事情吧。")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git checkout <filename/dirname>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git checkout 1.js")])]),t._v(" "),e("p",[t._v("这一命令主要用于本地工作区文件的撤回，下图是一个工作区文件被删除后的完美恢复过程。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_920b7e3506bb38783b9fa76a02da6f08.jpeg",alt:"1.png"}})]),t._v(" "),e("h2",{attrs:{id:"二-远程分支删除后-删除本地分支及关联"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-远程分支删除后-删除本地分支及关联"}},[t._v("#")]),t._v(" （二）远程分支删除后，删除本地分支及关联")]),t._v(" "),e("p",[t._v("为方便分支提交，一般情况下会用本地命令 "),e("code",[t._v("git branch --set-upstream-to=origin/master master")]),t._v(" 建立本地分支与远程分支的关联，从 master 拉出的分支可以自动建立与远程已有分支的关联，这样可以很方便的使用 "),e("code",[t._v("git pull")]),t._v(" 和 "),e("code",[t._v("git push")]),t._v(" 拉取远程分支的代码和将本地分支提交到远程。")]),t._v(" "),e("p",[t._v("Git 远程分支删除之后，本地分支就无法成功推送到远程，想要重新建立与远程仓库的关联，就需要先删除其原本的与已删除的远程分支的关联。")]),t._v(" "),e("p",[t._v("如下图所示，需要删除的远程分支为 feature/test，使用 "),e("code",[t._v("git push origin --delete feature/test")]),t._v(" 删除掉对应的远程分支之后，删除本地分支关联。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_99b520a28a62d42f3194b581ce5260de.jpeg",alt:"2(1).png"}})]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git branch --unset-upstream <branchname>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git branch --unset-upstream feature/test")])]),t._v(" "),e("p",[t._v("删除掉关联关系之后，用 "),e("code",[t._v("git branch -vv")]),t._v(" 命令可查看到本地分支与远程分支的关联关系如下图所示，可观察到 feature/test 分支已经没有关联的远程分支了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_3374b5759d80e6182686168170651a30.jpeg",alt:"2(2).png"}})]),t._v(" "),e("h2",{attrs:{id:"三-修改提交时的备注内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-修改提交时的备注内容"}},[t._v("#")]),t._v(" （三）修改提交时的备注内容")]),t._v(" "),e("p",[t._v("平时提交代码很多时候因为军情紧急，会在刚提交的时候填写了自己不太满意的备注，但笔者本人有点强迫症，一定要把它改成想要的样子咋办。。。。，不要慌，还是有解决办法滴！")]),t._v(" "),e("p",[t._v("想要修改最近一次提交的“修改xxx功能”的备注：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_aa5aea5ec813838347da49ea572fee47.jpeg",alt:"3(1).png"}})]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git commit --amend")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git commit --amend")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_e520df726617b30859396f8572fdb427.jpeg",alt:"3(2).png"}})]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("git log --pretty=oneline")]),t._v(" 查看内容，发现已经成功修改啦。"),e("strong",[t._v("需要注意的是此项命令会修改提交时的commit-id，即会覆盖原本的提交，需要谨慎操作")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"四-修改分支名-实现无缝衔接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-修改分支名-实现无缝衔接"}},[t._v("#")]),t._v(" （四）修改分支名，实现无缝衔接")]),t._v(" "),e("p",[t._v("开发中的大佬都是拥有极快手速的人，建了个分支一不小心打错了某个字母或者两个字母打反了，可能就与本意存在较大误差了，Git 提供一种已经拉取了分支，在上面开发了不少的内容，但后来发现原本拉的分支名字就有问题的修复方法。")]),t._v(" "),e("p",[t._v("例如，我们的想新建的分支名为 feature/story-13711，却写成了 feature/stor-13711：")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git branch -m <oldbranch> <newbranch>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git branch -m feature/stor-13711 feature/story-13711")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_a9796f83e3e9b5367779fa97f8366b2c.jpeg",alt:"4.png"}})]),t._v(" "),e("p",[t._v("执行完之后发现文件的工作区已修改内容一点都没有变化，真正的实现了无痛过渡，皆大欢喜！")]),t._v(" "),e("h2",{attrs:{id:"五-撤回提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-撤回提交"}},[t._v("#")]),t._v(" （五）撤回提交")]),t._v(" "),e("p",[t._v("日常工作中，可能由于需求变更、或者误操作等原因需要进行提交的撤回：")]),t._v(" "),e("p",[t._v("如下分析了各种原因撤销的场景，主要包括：")]),t._v(" "),e("ul",[e("li",[t._v("已将更改交到本地存储，需要撤回提交")]),t._v(" "),e("li",[t._v("用新的提交内容替换上一次的提交")]),t._v(" "),e("li",[t._v("本地提交了错误的文件")])]),t._v(" "),e("h3",{attrs:{id:"已将更改提交到本地-需要撤回提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#已将更改提交到本地-需要撤回提交"}},[t._v("#")]),t._v(" 已将更改提交到本地，需要撤回提交")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("： "),e("code",[t._v("git reset --soft [<commit-id>/HEAD~n>]")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git reset --soft HEAD~1")])]),t._v(" "),e("p",[t._v("命令执行完成后，查看文件变更记录，可发现如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_9e6f0b0e2803cabcd1bd109957985ab3.jpeg",alt:"5(2).png"}})]),t._v(" "),e("p",[t._v("文件变更记录与未提交之前的文件变更记录是一致的，只是撤销了 commit 的操作。")]),t._v(" "),e("h3",{attrs:{id:"用新的更改替换撤回的更改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用新的更改替换撤回的更改"}},[t._v("#")]),t._v(" 用新的更改替换撤回的更改")]),t._v(" "),e("p",[t._v("提交之中可能有些地方需要优化，我们可以撤销本次的 commit 以及文件暂存状态，修改之后再重新添加到暂存区进行提交。")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("： "),e("code",[t._v("git reset --mixed [<commit-id>/HEAD~n>]")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git reset --mixed HEAD~1")])]),t._v(" "),e("p",[t._v("命令执行完成后，查看文件变更记录，可发现如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_317b27f5fb6cddb0d3f4b0866107fb0d.jpeg",alt:"5(3).png"}})]),t._v(" "),e("p",[t._v("已变更的文件都未添加到暂存区，撤销了 commit 和 add 的操作。")]),t._v(" "),e("h3",{attrs:{id:"本地提交了错误的文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地提交了错误的文件"}},[t._v("#")]),t._v(" 本地提交了错误的文件")]),t._v(" "),e("p",[t._v("本地将完全错误的，本不应提交的内容提交到了仓库，需要进行撤销，可以使用 --hard 参数")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("： "),e("code",[t._v("git reset --hard [<commit-id>/HEAD~n>]")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git reset --hard HEAD~1")])]),t._v(" "),e("p",[t._v("命令执行完成后，查看文件变更记录，可发现如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_f2dbca8b9718214953fa34bc02bd52c0.jpeg",alt:"5(4).png"}})]),t._v(" "),e("p",[t._v("已追踪文件的变更内容都消失了，撤销了 commit 和 add 的操作，同时撤销了本地已追踪内容的修改；未追踪的内容不会被改变。从上面的效果可以看到，文件的修改都会被撤销。"),e("strong",[t._v("-hard 参数需要谨慎使用")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"六-撤销本地分支合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-撤销本地分支合并"}},[t._v("#")]),t._v(" （六）撤销本地分支合并")]),t._v(" "),e("p",[t._v("实际操作中，总会有很多的干扰，导致我们合并了并不该合并的分支到目标分支上。解决这种问题的方式有两种，"),e("code",[t._v("git reset")]),t._v(" 和 "),e("code",[t._v("git revert")]),t._v("。 reset 的语法和命令之前已经介绍过，不做赘述， revert 的语法和命令和 reset 一致。但是产生的实际效果会有不同。")]),t._v(" "),e("p",[t._v("可以先来看下 revert 操作的实际效果，合并分支之后的效果如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_86f7f94c4118991d03d9cb6c47277828.jpeg",alt:"6(1).png"}})]),t._v(" "),e("p",[t._v("撤销合并：")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git revert <commit-id>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git revert 700920")])]),t._v(" "),e("p",[t._v("下图为执行命令后的效果：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_3ac3f2f171d3b51782c19ce0e8a4db6f.jpeg",alt:"6(2).png"}})]),t._v(" "),e("p",[t._v("经过前后对比可知，revert 执行之后会在原本的记录中新增一条提交记录。")]),t._v(" "),e("p",[t._v("reset 如上 “本地文件撤销” 例子所述，会删除掉原本已有的提交记录，在合并分支中，会删除原本合并分支的记录。revert 则有不同，会保留原本合并分支的记录，并在其上新增一条提交记录，便于之后有需要仍然能够回溯到 revert 之前的状态。")]),t._v(" "),e("p",[t._v("从需要提交到远程分支的角度来讲，reset 能够“毁尸灭迹”，不让别人发现我们曾经错误的合并过分支（"),e("strong",[t._v("注：多人协作中，需要谨慎使用")]),t._v("）；revert 则会将合并分支和撤回记录一并显示在远程提交记录上。")]),t._v(" "),e("h2",{attrs:{id:"七-恢复误删的本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-恢复误删的本地分支"}},[t._v("#")]),t._v(" （七）恢复误删的本地分支")]),t._v(" "),e("p",[t._v("本地分支拉取之后，由于疏忽被删除，而且本地的分支并没有被同步到远程分支上，此时想要恢复本地分支。")]),t._v(" "),e("p",[t._v("误删的分支为 feature/delete，使用 "),e("code",[t._v("git reflog")]),t._v(" 命令可查看到该仓库下的所有历史操作，如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_b652bae25cb19d5b4800170c296def28.jpeg",alt:"7(1).png"}})]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git checkout -b <branch-name> <commit-id>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git checkout -b feature/delete HEAD@{2}")])]),t._v(" "),e("p",[t._v("命令执行完成后，分支恢复到 HEAD@{2} 的快照，即从 master 分支拉取 feature/delete 分支的内容，仍然缺少“新增xxx文件”的提交，直接将文件内容恢复到最新的提交内容，使用命令 "),e("code",[t._v("git reset --hard HEAD@{1}")]),t._v(" 即可实现硬性覆盖本地工作区内容的目的。"),e("code",[t._v("git reflog")]),t._v(" 命令获取到的内容为本地仓库所有发生过的变更，可谓恢复利器，既可向前追溯，亦可向后调整，满满的时光追溯器的赶脚啊。。。")]),t._v(" "),e("h2",{attrs:{id:"八-不确定哪个分支有自己提交的-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-不确定哪个分支有自己提交的-commit"}},[t._v("#")]),t._v(" （八）不确定哪个分支有自己提交的 commit")]),t._v(" "),e("p",[t._v("工作中会经常碰到一种场景，某个提交先后合并到了各个分支上，但后来发现提交的这个修改是有问题的，需要排查到底哪个分支包含这个提交，然后将其修复掉。")]),t._v(" "),e("p",[t._v("需要先确定有问题的提交的 commit-id :")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_b9d3c4c2dffdf45b78b41021d8efdce6.jpeg",alt:"8(1).png"}})]),t._v(" "),e("p",[t._v("然后查看本地所有的分支：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_dfe14e32a79a8926637a10a6caffd761.jpeg",alt:"8(2).png"}})]),t._v(" "),e("p",[t._v("可以看到本地有 4 个分支，本地的分支数量非人为控制的，在使用状态的分支直接删掉也不合适，分支数量达到一定程度，一个一个分支查找也不现实。Git 提供了一种能够直接通过 commit-id 查找出包含该内容分支的命令。")]),t._v(" "),e("p",[e("strong",[t._v("语法")]),t._v("："),e("code",[t._v("git branch --contains <commit-id>")])]),t._v(" "),e("p",[e("strong",[t._v("命令")]),t._v("："),e("code",[t._v("git branch --contains 700920")])]),t._v(" "),e("p",[t._v("命令执行后可以看到包含该问题提交的分支如下图所示，就可以很方便的在对应分支上修复内容啦。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://www.zoo.team/images/upload/upload_04c088890f184b87c394a2759fc2eabd.jpeg",alt:"8(3).png"}})]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("本文介绍的是实际工作场景中可能出现的几种异常情况及解决方式，希望能够对大家有所帮助，不足之处敬请指正。实际上现在已经有很多 Git 操作对应的工具可以使用，需要明白的是工具中的每个操作等同于 Git 命令行的哪个命令，会有什么样的结果，以避免一些不必要发生的错误。")]),t._v(" "),e("h2",{attrs:{id:"参考文献"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.edureka.co/blog/common-git-mistakes/#pushed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 错误集锦和修复方法"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/ea6341224e89",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 中.gitignore的配置语法"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b0e5adc6fb9a009d82e4f20",target:"_blank",rel:"noopener noreferrer"}},[t._v("git reset 和 git revert"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=v.exports}}]);