(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{339:function(t,_,v){"use strict";v.r(_);var s=v(4),a=Object(s.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"git基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git基础"}},[t._v("#")]),t._v(" Git基础")]),t._v(" "),_("p",[t._v("命令行方式：任意目录（建议开发根目录）右键 > Git Bash Here")]),t._v(" "),_("h5",{attrs:{id:"_1、配置用户"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置用户"}},[t._v("#")]),t._v(" 1、配置用户")]),t._v(" "),_("p",[t._v("配置用户的意义在于记录开发者信息，以便在版本控制记录开发者的操作行为，如lion于2016-08-24解决了一个bug。")]),t._v(" "),_("p",[t._v('git config --global user.name "自已的名字"')]),t._v(" "),_("p",[t._v('git config --global user.email "自已的邮箱地址"')]),t._v(" "),_("p",[t._v("--global 配置当前用户所有仓库")]),t._v(" "),_("p",[t._v("--system 配置当前计算机上所有用户的所有仓库")]),t._v(" "),_("p",[t._v("注：配置用户只需要执行1次，可以重复使用。")]),t._v(" "),_("h5",{attrs:{id:"_2-初始化仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化仓库"}},[t._v("#")]),t._v(" 2，初始化仓库")]),t._v(" "),_("p",[t._v("我们如果想要利用git进行版本控制，需要将现有项目初始化为一个仓库，或者将一个已有的使用git进行版本控制的仓库克隆到本地。")]),t._v(" "),_("p",[t._v("a) git init")]),t._v(" "),_("p",[t._v("git init只是创建了一个名为.git的隐藏目录，这个目录就是存储我们历史版本的仓库，ls -al 可以查看。")]),t._v(" "),_("p",[t._v("b) 假如公司已有项目用了Git，那我们就利用克隆")]),t._v(" "),_("p",[t._v("git clone 仓库地址")]),t._v(" "),_("p",[t._v("执行完这个命令，会在当前目录下生成一个Monment目录（默认和仓库名称相同），这个便是已有一个使用Git管理的项目。")]),t._v(" "),_("h5",{attrs:{id:"_3-、查看文件状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-、查看文件状态"}},[t._v("#")]),t._v(" "),_("strong",[t._v("3")]),t._v("**、查看文件状态**")]),t._v(" "),_("p",[t._v("初始化仓库后便可以进行开发了，进入到刚刚创建好并初始为仓库的目录，添加我们开发需要的文件。")]),t._v(" "),_("p",[t._v("通过git status可以检测当前仓库文件的状态")]),t._v(" "),_("p",[t._v("注：git会忽略空的目录")]),t._v(" "),_("h5",{attrs:{id:"_4-、添加文件到暂存区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-、添加文件到暂存区"}},[t._v("#")]),t._v(" "),_("strong",[t._v("4")]),t._v("**、添加文件到暂存区**")]),t._v(" "),_("p",[t._v("假设经过一段时间的开发后，需要把已开发的部分存起来，使用git add 添加到暂存区。")]),t._v(" "),_("p",[t._v("git add 文件名/ 文件路径 “*”或-A代表所有")]),t._v(" "),_("p",[t._v("放到暂存区的文件被标记成了绿色，等待提交。")]),t._v(" "),_("p",[t._v("注：颜色是工具给添加的，目的是增加可读性并不是git统一的。")]),t._v(" "),_("h5",{attrs:{id:"_5、撤销更改"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5、撤销更改"}},[t._v("#")]),t._v(" 5、撤销更改")]),t._v(" "),_("p",[t._v("继续我们的开发")]),t._v(" "),_("p",[t._v("再次git status可以再次查看仓库状态")]),t._v(" "),_("p",[t._v("说明index.html再次被修改了，并被标记了红色。")]),t._v(" "),_("p",[t._v("又经过一段时间后发现新开发的部分有Bug，想要回到之前状态，可以使用git checkout 文件名。")]),t._v(" "),_("p",[t._v("注：从暂存区还原原到工作区")]),t._v(" "),_("h5",{attrs:{id:"_5-、提交文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-、提交文件"}},[t._v("#")]),t._v(" "),_("strong",[t._v("5")]),t._v("**、提交文件**")]),t._v(" "),_("p",[t._v("经过一个相对较长阶段开发或者一个功能开发完成了，就可以提交到本地仓库了，永久保存了。")]),t._v(" "),_("p",[t._v("git commit -m '备注信息'")]),t._v(" "),_("p",[t._v("将暂存区被标记成绿色的文件，全部提交到本地仓库存储。")]),t._v(" "),_("p",[t._v("这时git status查看状态")]),t._v(" "),_("p",[t._v("没有什么可提交的，变的很干净。")]),t._v(" "),_("h5",{attrs:{id:"_6-、查看提交历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-、查看提交历史"}},[t._v("#")]),t._v(" "),_("strong",[t._v("6")]),t._v("**、查看提交历史**")]),t._v(" "),_("p",[t._v("反反复复开发了很多的功能了，通过git log查看一下提交的历史。")]),t._v(" "),_("p",[t._v("我们可以查看到一次次提交记录")]),t._v(" "),_("p",[t._v("commit 81b1e4fc2ae178caedf4575596377a80a6f1e73f")]),t._v(" "),_("p",[t._v("代表一次提交的唯一ID，一般称为SHA值。傻？")]),t._v(" "),_("p",[t._v("注：按键盘q键退出。")]),t._v(" "),_("h5",{attrs:{id:"_7-、再次检测仓库文件状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-、再次检测仓库文件状态"}},[t._v("#")]),t._v(" "),_("strong",[t._v("7")]),t._v("**、再次检测仓库文件状态**")]),t._v(" "),_("p",[t._v("隔了好些天后，继续开发")]),t._v(" "),_("p",[t._v("git status 查看状态")]),t._v(" "),_("p",[t._v("又提示有修改，等待重新添加到暂存区。")]),t._v(" "),_("h5",{attrs:{id:"_8-、重新添加暂存区然后提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-、重新添加暂存区然后提交"}},[t._v("#")]),t._v(" "),_("strong",[t._v("8")]),t._v("**、重新添加暂存区然后提交**")]),t._v(" "),_("h5",{attrs:{id:"_9-、再次查看历史"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-、再次查看历史"}},[t._v("#")]),t._v(" "),_("strong",[t._v("9")]),t._v("**、再次查看历史**")]),t._v(" "),_("p",[t._v("git log 可查到所有提交历史")]),t._v(" "),_("p",[t._v("这时可以查看到更多提交历史。")]),t._v(" "),_("p",[t._v("这时关掉所有目录甚至关机！")]),t._v(" "),_("h5",{attrs:{id:"_10-、恢复上一次提交的状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-、恢复上一次提交的状态"}},[t._v("#")]),t._v(" "),_("strong",[t._v("10")]),t._v("**、恢复上一次提交的状态**")]),t._v(" "),_("p",[t._v("通过SHA值可以回到之前某一次的提交（时光倒流）")]),t._v(" "),_("p",[t._v("git reset --hard c888a614e072e2这样便回到了支付功能的状态")]),t._v(" "),_("p",[t._v("git log再次查看发现最后一次提交成了支付功能了")]),t._v(" "),_("p",[t._v("仓库示意图")]),t._v(" "),_("h3",{attrs:{id:"git分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git分支"}},[t._v("#")]),t._v(" Git分支")]),t._v(" "),_("p",[t._v("在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，等这个BUG修复完成后再继续我们的任务。如何实现呢？")]),t._v(" "),_("p",[t._v("通过Git创建分支来解决实际开发中类似的问题。")]),t._v(" "),_("p",[t._v("在Git的使用过程中一次提交称为历史记录（版本），并且会生成一个唯一的字符串，如下图")]),t._v(" "),_("p",[t._v("这个串可以代表某一个历史版本（实际使用只取前面几位就可以），")]),t._v(" "),_("p",[t._v("值得注意的是所有的提交（commit）实际上都是在分支（branch）的基础上进行的。")]),t._v(" "),_("p",[t._v("如下图所示：")]),t._v(" "),_("p",[t._v("当我们在初始化仓库的时候（实际上是产生第1次提交时），Git会默认帮我们创建了一个master的分支，并且有指针（HEAD）指到了末端。")]),t._v(" "),_("p",[t._v("指针（HEAD）用来标明当前处于哪个分支的哪个版本，如上图指的处于master分支的最后1个版本。")]),t._v(" "),_("p",[t._v("我们也可以创建自已的分支")]),t._v(" "),_("p",[_("strong",[t._v("1")]),t._v("**、创建分支**")]),t._v(" "),_("p",[t._v("git branch hotfix")]),t._v(" "),_("p",[t._v("新的分支会在当前分支原有历史版本的结点上进行创建，我称其为子分支如下图")]),t._v(" "),_("p",[t._v("新建的子分支会继承父分支的所有提交历史。")]),t._v(" "),_("p",[_("strong",[t._v("2")]),t._v("**、切换分支**")]),t._v(" "),_("p",[t._v("git checkout hotfix")]),t._v(" "),_("p",[t._v("我们发现HEAD现在又指向了hotfix的末端。")]),t._v(" "),_("p",[_("strong",[t._v("3")]),t._v("**、再次提交操作**")]),t._v(" "),_("p",[t._v("修改bug后，提交")]),t._v(" "),_("p",[t._v("这次的提交历史版本就会记录在hotfix这个分支上了，并且HEAD伴随hotfix在移动。")]),t._v(" "),_("p",[_("strong",[t._v("4")]),t._v("**、当我们再次切回到"),_("strong",[_("strong",[t._v("master")])]),t._v("时**")]),t._v(" "),_("p",[t._v("当我们切换回master后，HEAD指向了master分支的末端，并且我们观察发现我们的文件内容还是原来的“模样”。")]),t._v(" "),_("p",[_("strong",[t._v("5")]),t._v("**、继续之前的开发**")]),t._v(" "),_("p",[t._v("总结：当我们git checkout branchname时，HEAD会自动指向对应分支的末端，工作目录中的源码也会随之发生改变。")]),t._v(" "),_("p",[t._v("这个时候我们就在hotfix这个分支上修复了这个BUG，而我们原来在master分支上的操作并未受到影响。")]),t._v(" "),_("p",[t._v("思考一个问题：")]),t._v(" "),_("p",[t._v("现在master这个分支上是否包含了hotfix的修复呢？")]),t._v(" "),_("p",[t._v("实际上从上图可以看出这时的master分支并没有包含有hotfix的修复。")]),t._v(" "),_("p",[_("strong",[t._v("6")]),t._v("**、合并（融合）分支**")]),t._v(" "),_("p",[t._v("这时master会有两个父结点了，master便包含了hotfix里的修复了")]),t._v(" "),_("p",[_("strong",[t._v("7")]),t._v("**、删除分支**")]),t._v(" "),_("p",[t._v("git branch -d hotfix")]),t._v(" "),_("p",[t._v("这时用来修复BUG创建的hotfix分支已经没有用处了，我们可以将它删除。")]),t._v(" "),_("h2",{attrs:{id:"git远程-共享-仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git远程-共享-仓库"}},[t._v("#")]),t._v(" Git远程（共享）仓库")]),t._v(" "),_("p",[t._v("通过上面学习我们可以很好的管理本地版本控制了，可是如果我们下班回到家里突然来了灵感觉得有部分代码可以优化，如果能接着公司电脑上的代码继续写该有多好呀！另一种情形，假设项目比较大，不同的功能模块由不同的开发人员完成，不同模块儿之间又难免会依赖关系，这时如果我们的代码互相合并（融合）该有多好呀！所有模块开发完毕后，需要整合到一起，要能做到准确无误该有多好呀！")]),t._v(" "),_("p",[t._v("借助一个远程仓库，大家可以共享代码、历史版本等数据，便可以解决以上遇到的所有问题，在学习远程仓库前我们先来学习git clone path这个命令。")]),t._v(" "),_("p",[_("strong",[t._v("3")]),t._v("**、创建共享仓库**")]),t._v(" "),_("p",[t._v("Git要求共享仓库是一个以.git结尾的目录。")]),t._v(" "),_("p",[t._v("mkdir repo.git 创建以.git结尾目录")]),t._v(" "),_("p",[t._v("cd repo.git 进入这个目录")]),t._v(" "),_("p",[t._v("git init --bare 初始化一个共享仓库，也叫裸仓库 注意选项--bare")]),t._v(" "),_("p",[t._v("这样我们就建好了一个共享的仓库，但这时这个仓库是一个空的仓库，并且不允在这个仓库中进行任何修改。")]),t._v(" "),_("p",[_("strong",[t._v("4")]),t._v("**、向共享仓库共享（同步）内容**")]),t._v(" "),_("p",[t._v("将自已开发的项目同步到这个目录中，其它开发者就可以共享你开发的项目了。")]),t._v(" "),_("p",[t._v("1、进入到yike目录")]),t._v(" "),_("p",[t._v("2、git push ../repo.git master")]),t._v(" "),_("p",[t._v("这样便把yike中的项目同步进了repo.git中。")]),t._v(" "),_("p",[_("strong",[t._v("5")]),t._v("**、从共享仓库里取出内容**")]),t._v(" "),_("p",[t._v("1、新创建一个目录（模拟另一个开发者）")]),t._v(" "),_("p",[t._v("2、git clone ./repo.git demo")]),t._v(" "),_("p",[t._v("通过repo.git共享仓库，我们轻松得到了一个yike的副本")]),t._v(" "),_("p",[_("strong",[t._v("6")]),t._v("**、通过"),_("strong",[_("strong",[t._v("demo")])]),t._v("仓库向"),_("strong",[_("strong",[t._v("repo.git")])]),t._v("共享内容**")]),t._v(" "),_("p",[t._v("进入到demo里，我们做一些修改")]),t._v(" "),_("p",[t._v("cd demo")]),t._v(" "),_("p",[t._v("git push ../repo.git master")]),t._v(" "),_("p",[_("strong",[t._v("7")]),t._v("**、在"),_("strong",[_("strong",[t._v("360")])]),t._v("仓库从"),_("strong",[_("strong",[t._v("repo.git")])]),t._v("获取共享的内容**")]),t._v(" "),_("p",[t._v("cd yike")]),t._v(" "),_("p",[t._v("git pull ../repo.git master")]),t._v(" "),_("p",[t._v("奇迹似乎发生了，我们轻松的将demo仓库里的内容，通过repo.git共享给了yike仓库。")]),t._v(" "),_("p",[t._v("惊喜不断，问题也总是不断，我们发现我们这个共享的仓库只是放到了本地的，其它人是没有办法从我们这个共享仓库共享内容的！！！")]),t._v(" "),_("p",[t._v("然而现实是，办法总是有的！！！！")]),t._v(" "),_("p",[t._v("我们把这个共享的仓库放到一台远程服务器上，问题不就解决了吗？")]),t._v(" "),_("h2",{attrs:{id:"github和gitlab"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#github和gitlab"}},[t._v("#")]),t._v(" gitHub和gitLab")]),t._v(" "),_("p",[t._v("如果我们熟悉服务器的话，我们完全可以将上述的步骤在我们的远程服务器上进行操作，然后再做一些登录权限的设置，就可非常完美的搭建一个共享服务器了。其实为了更好的管理我们的仓库，一些第三方机构开发出了Web版仓库管理程序，通过Web界面形式管理仓库。")]),t._v(" "),_("p",[t._v("gitHub关于它的名气与意义，大家可以自行查阅，我们这里介绍它的使用")]),t._v(" "),_("p",[_("strong",[t._v("1")]),t._v("**、注册账号并完善资料**")]),t._v(" "),_("p",[_("strong",[t._v("2")]),t._v("**、创建共享仓库*")]),t._v(" "),_("p",[_("strong",[t._v("3")]),t._v("**、填写仓库资料**")]),t._v(" "),_("p",[_("strong",[t._v("4")]),t._v("**、共享仓库**")]),t._v(" "),_("p",[t._v("远程地址特别长，我们可以给他起一个别名")]),t._v(" "),_("p",[t._v("git remote add origin git@github.com:Botue/repo.git")]),t._v(" "),_("p",[t._v("这样origin 就代表 git@github.com:Botue/repo.git")]),t._v(" "),_("p",[t._v("当我们通过git clone 从共享仓库获内容时，会自动帮我们添加origin到对应的仓库地址，例如：git clone git@github.com:Botue/repo.git 会自动添加origin 对应 git@github.com:Botue/repo.git")]),t._v(" "),_("p",[_("strong",[t._v("5")]),t._v("**、生成密钥**")]),t._v(" "),_("p",[t._v("ssh-keygen -t rsa 然后一路回车，这里会在当前用户生成了一个.ssh的文件夹")]),t._v(" "),_("p",[t._v("将id_rsa.pub公钥的内容复制")]),t._v(" "),_("p",[t._v("打开gitHub的个人中心")]),t._v(" "),_("p",[t._v("打到SSH keys")]),t._v(" "),_("p",[t._v("到此我们便可以通过gitHub 提供的Web界面来管理我们的仓库了。")]),t._v(" "),_("p",[t._v("我们发现通过gitHub管理仓库实在是太方便了，可是只能免费使用公开仓库，自已公司的代码当然不能公开了，可是私有仓库又是需要交“保护费”的，无耐国人还是比较喜欢免费的，网络界总是有很多雷峰的，比如gitLab!!!")]),t._v(" "),_("p",[t._v("gitLab也是一个可以通过Web界面管理仓库的网站程序，我们可以把它架设到公司自已的服务器上，实现仓库私有化，这也是大部分公司通常采用的方法，其使用方法与gitHub十分相似。")]),t._v(" "),_("p",[t._v("我将闲置电脑配置成了一台服务器，上面架设了gitLab程序，我们接下来的练习全部会在gitLab上进行演示。")]),t._v(" "),_("p",[t._v("省略很多内容.....")]),t._v(" "),_("h2",{attrs:{id:"命令汇总"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命令汇总"}},[t._v("#")]),t._v(" 命令汇总")]),t._v(" "),_("p",[t._v("git config配置本地仓库")]),t._v(" "),_("p",[t._v("常用git config --global user.name、git config --global user.email")]),t._v(" "),_("p",[t._v("git config --list查看配置详情")]),t._v(" "),_("p",[t._v("git init 初始一个仓库，添加--bare可以初始化一个共享（裸）仓库")]),t._v(" "),_("p",[t._v("git status 可以查看当前仓库的状态")]),t._v(" "),_("p",[t._v("git add“文件” 将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、“*”、-A")]),t._v(" "),_("p",[t._v("git commit -m '备注信息' 将暂存区的文件，提交到本地仓库")]),t._v(" "),_("p",[t._v("git log 可以查看本地仓库的提交历史")]),t._v(" "),_("p",[t._v("git branch查看分支")]),t._v(" "),_("p",[t._v("git branch“分支名称” 创建一个新的分支")]),t._v(" "),_("p",[t._v("git checkout“分支名称” 切换分支")]),t._v(" "),_("p",[t._v("git checkout -b deeveloper 他健并切到developer分支")]),t._v(" "),_("p",[t._v("git merge“分支名称” 合并分支")]),t._v(" "),_("p",[t._v("git branch -d “分支名称” 删除分支")]),t._v(" "),_("p",[t._v("git clone “仓库地址”获取已有仓库的副本")]),t._v(" "),_("p",[t._v("git push origin “本地分支名称:远程分支名称”将本地分支推送至远程仓库，")]),t._v(" "),_("p",[t._v("git push origin hotfix（通常的写法）相当于")]),t._v(" "),_("p",[t._v("git push origin hotfix:hotfix")]),t._v(" "),_("p",[t._v("git push origin hotfix:newfeature")]),t._v(" "),_("p",[t._v("本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push “仓库地址” “分支名称”，如果远程仓库没有对应分支，将会自动创建")]),t._v(" "),_("p",[t._v("git remote add “主机名称” “远程仓库地址”添加远程主机，即给远程主机起个别名，方便使用")]),t._v(" "),_("p",[t._v("git remote 可以查看已添加的远程主机")]),t._v(" "),_("p",[t._v("git remote show “主机名称”可以查看远程主机的信息")]),t._v(" "),_("h2",{attrs:{id:"gitlab完整演示"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitlab完整演示"}},[t._v("#")]),t._v(" GitLab完整演示")]),t._v(" "),_("p",[t._v("没错，Git非常强大！")]),t._v(" "),_("p",[t._v("但是，如果我们的分支不加以规范管理，也有可能适得其反！")]),t._v(" "),_("p",[t._v("1、不要有太多的树杈（子分支）")]),t._v(" "),_("p",[t._v("2、要有一个“稳定分支”，即master分支不要轻意被修改")]),t._v(" "),_("p",[t._v("3、要有一个开发分支（developer），保证master分支的稳定性")]),t._v(" "),_("p",[t._v("4、所有的功能分支（feature）从developer创建")]),t._v(" "),_("p",[t._v("5、所有功能开发完成后新建发布分支（release）")]),t._v(" "),_("h2",{attrs:{id:"冲突解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#冲突解决"}},[t._v("#")]),t._v(" 冲突解决")]),t._v(" "),_("p",[t._v("假如两个开发同时改到同一文件的同一段内容会发生什么事情呢？")]),t._v(" "),_("p",[t._v("这时就会就会产生冲突了，当冲突产生后，需要开发者进行协商确认冲突的原因，然后将冲突代码删除重新提交就可以了。")]),t._v(" "),_("h2",{attrs:{id:"git高级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git高级"}},[t._v("#")]),t._v(" Git高级")]),t._v(" "),_("p",[t._v("熟悉掌握以上操作，基本上是可以满足日常开的需要的，但是在解决一些特殊问题时，就又需要我们能够掌握更多的命令。")]),t._v(" "),_("h3",{attrs:{id:"gitignore忽略文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitignore忽略文件"}},[t._v("#")]),t._v(" gitignore忽略文件")]),t._v(" "),_("p",[t._v("在项目根目录下创建一个.gitignore文件，可以将不希望提交的罗列在这个文件里，如项目的配置文件、node_modules等")]),t._v(" "),_("p",[t._v("https://github.com/github/gitignore")]),t._v(" "),_("h3",{attrs:{id:"比较差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#比较差异"}},[t._v("#")]),t._v(" 比较差异")]),t._v(" "),_("p",[t._v("当内容被修改，我们无法确定修改哪些内容时，可以通过git diff来进行差异比较。")]),t._v(" "),_("p",[t._v("git difftool 比较的是工作区和暂存的差异")]),t._v(" "),_("p",[t._v("git difftool “SHA”比较与特定提交的差异")]),t._v(" "),_("p",[t._v("git difftool “SHA”“SHA”比较某两次提交的差异")]),t._v(" "),_("p",[t._v("git difftool 分支名称 比较与某个分支的差异")]),t._v(" "),_("p",[_("strong",[t._v("2")]),t._v("**、回滚（撤销）操作**")]),t._v(" "),_("p",[t._v("HEAD 默认指向当前分支的“末端”，即最后的一次提交，但是我们通过git reset 可以改变HEAD的指向。")]),t._v(" "),_("p",[_("strong",[t._v("看情况解释（稍微复杂一些，理解就好）")])]),t._v(" "),_("p",[t._v("1、git reset")]),t._v(" "),_("p",[t._v("--hard 工作区会变、历史(HEAD)会变， 暂存区也变")]),t._v(" "),_("p",[t._v("--soft 只会变历史(HEAD)")]),t._v(" "),_("p",[t._v("--mixed（默认是这个选项）历史(HEAD)会变、暂存区也变，工作区不变")]),t._v(" "),_("p",[t._v("2、git checkout")]),t._v(" "),_("p",[t._v('git checkout SHA -- "某个文件"，代表只是从SHA这个版中取出特定的文件，')]),t._v(" "),_("p",[t._v("和git reset 是有区别的，reset 重写了历史，checkout 则没有。")]),t._v(" "),_("h3",{attrs:{id:"更新仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#更新仓库"}},[t._v("#")]),t._v(" 更新仓库")]),t._v(" "),_("p",[t._v("在项目开发过程中，经常性的会遇到远程（共享）仓库和本地仓库不一致，我们可以通过git fetch 命令来更新本地仓库，使本地仓库和远程（共享）仓库保持一致。")]),t._v(" "),_("p",[t._v("git fetch  “远程主机”")]),t._v(" "),_("p",[t._v("或者")]),t._v(" "),_("p",[t._v("git fetch “远程主机” “分支名称”")]),t._v(" "),_("p",[t._v("我们要注意的是，利用git fetch 获取的更新会保存在本地仓库中，但是并没有体现到我们的工作目录中，需要我们再次利用git merge来将对应的分支合并（融合）到特定分支。如下")]),t._v(" "),_("p",[t._v("git pull origin 某个分支， 上操作相当于下面两步")]),t._v(" "),_("p",[t._v("git fetch")]),t._v(" "),_("p",[t._v("git merge origin/某个分支")]),t._v(" "),_("p",[_("strong",[t._v("问题：如何查看远程主机上总共有多少个分支？")])]),t._v(" "),_("p",[t._v("git branch -a 便可以查看所有(本地+远程仓库)分支了")]),t._v(" "),_("h2",{attrs:{id:"其它"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),_("p",[t._v("删除远程分支git push origin --delete 分支名称")]),t._v(" "),_("p",[t._v("删除远程分支git push origin :分支名称")]),t._v(" "),_("h3",{attrs:{id:"补充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git tag\ngit push --tags\n\n")])])]),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[t._v("我们有时会遇到这样的情况，正在dev分支开发新功能，做到一半时有人过来反馈一个bug，让马上解决，但是新功能做到了一半你又不想提交，这时就可以使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。下面来看一下git stash命令的常见用法\n\ngit stash\n保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动。使用git stash save "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message...'")]),t._v("可以添加一些注释\n\ngit stash list\n显示保存进度的列表。也就意味着，git stash命令可以多次执行。\n\ngit stash pop "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("–index"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash_id"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ngit stash pop 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。\ngit stash pop "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("index 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）\ngit stash pop stash@"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("恢复指定的进度到工作区。stash_id是通过git stash list命令得到的\n通过git stash pop命令恢复进度后，会删除当前进度。\ngit stash apply "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("–index"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash_id"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n除了不删除恢复的进度之外，其余和git stash pop 命令一样。\n\ngit stash drop "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stash_id"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。\n\ngit stash clear\n删除所有存储的进度。\n")])])]),_("div",{staticClass:"language-js extra-class"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 基本使用\nstash命令可用于临时保存和回复修改，可跨分支。\n\n注：在未add之前才能执行stash！！！！\n\ngit stash "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("save message"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n保存，save为可选项，message为本次保存的注释\ngit stash list\n所有保存的记录列表\ngit stash pop stash@"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次\ngit stash apply stash@"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n恢复，num是可选项，通过git stash list可查看具体值。可回复多次\ngit stash drop stash@"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n删除某个保存，num是可选项，通过git stash list可查看具体值\ngit stash clear\n删除所有保存\n\n")])])])])}),[],!1,null,null,null);_.default=a.exports}}]);